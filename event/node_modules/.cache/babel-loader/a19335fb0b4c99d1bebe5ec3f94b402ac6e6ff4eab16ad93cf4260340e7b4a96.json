{"ast":null,"code":"// Importa funcoes do React necessarias para criar e use contexto\nimport{createContext,useState,useContext}from\"react\";import secureLocalStorage from\"react-secure-storage\";// Cria o contexto de autenticacao, que vai permitir compartilhar dados entre componentes\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Esse componente vai envolver a aplicacao (ou parte dela) e fornecer os dados de authenticacao para os filhos\n// Provider = prover/dar\nexport const AuthProvider=_ref=>{let{children}=_ref;// Cria um estado que guarda os dados do ususario logado\nconst[usuario,setUsuario]=useState(()=>{const usuarioSalvo=secureLocalStorage.getItem(\"tokenLogin\");return usuarioSalvo?JSON.parse(usuarioSalvo):undefined;});return(/*#__PURE__*/// O Athcontext.Provider permite que qualquer componente dentro dele acesse o `usuario` e `setUsuario`\n// Faz com que qualquer componente que esteja dentro e <AuthProvider> consiga acessar o valor { usuario, setUsuario } usando o hook useAuth().\n_jsx(AuthContext.Provider,{value:{usuario,setUsuario},children:children}));};// Esse hook personalizado facilita o acesso ao contexto dentro de qualquer componente\n// USAR!!!\nexport const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["createContext","useState","useContext","secureLocalStorage","jsx","_jsx","AuthContext","AuthProvider","_ref","children","usuario","setUsuario","usuarioSalvo","getItem","JSON","parse","undefined","Provider","value","useAuth"],"sources":["C:/Users/50526683848/Desktop/ReactEvent/event/src/contexts/AuthContext.js"],"sourcesContent":["// Importa funcoes do React necessarias para criar e use contexto\r\nimport { createContext, useState, useContext } from \"react\";\r\nimport secureLocalStorage from \"react-secure-storage\";\r\n// Cria o contexto de autenticacao, que vai permitir compartilhar dados entre componentes\r\nconst AuthContext = createContext();\r\n\r\n// Esse componente vai envolver a aplicacao (ou parte dela) e fornecer os dados de authenticacao para os filhos\r\n// Provider = prover/dar\r\nexport const AuthProvider = ({ children}) => {\r\n    // Cria um estado que guarda os dados do ususario logado\r\n    const [usuario, setUsuario] = useState(() => {\r\n        const usuarioSalvo = secureLocalStorage.getItem(\"tokenLogin\");\r\n        return usuarioSalvo ? JSON.parse(usuarioSalvo) : undefined;\r\n    });\r\n\r\n    return(\r\n        // O Athcontext.Provider permite que qualquer componente dentro dele acesse o `usuario` e `setUsuario`\r\n        // Faz com que qualquer componente que esteja dentro e <AuthProvider> consiga acessar o valor { usuario, setUsuario } usando o hook useAuth().\r\n        <AuthContext.Provider value={{ usuario, setUsuario}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Esse hook personalizado facilita o acesso ao contexto dentro de qualquer componente\r\n// USAR!!!\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n"],"mappings":"AAAA;AACA,OAASA,aAAa,CAAEC,QAAQ,CAAEC,UAAU,KAAQ,OAAO,CAC3D,MAAO,CAAAC,kBAAkB,KAAM,sBAAsB,CACrD;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC;AACA;AACA,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAAiB,IAAhB,CAAEC,QAAQ,CAAC,CAAAD,IAAA,CACpC;AACA,KAAM,CAACE,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,IAAM,CACzC,KAAM,CAAAW,YAAY,CAAGT,kBAAkB,CAACU,OAAO,CAAC,YAAY,CAAC,CAC7D,MAAO,CAAAD,YAAY,CAAGE,IAAI,CAACC,KAAK,CAACH,YAAY,CAAC,CAAGI,SAAS,CAC9D,CAAC,CAAC,CAEF,oBACI;AACA;AACAX,IAAA,CAACC,WAAW,CAACW,QAAQ,EAACC,KAAK,CAAE,CAAER,OAAO,CAAEC,UAAU,CAAE,CAAAF,QAAA,CAC/CA,QAAQ,CACS,CAAC,EAE/B,CAAC,CAED;AACA;AACA,MAAO,MAAM,CAAAU,OAAO,CAAGA,CAAA,GAAMjB,UAAU,CAACI,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}